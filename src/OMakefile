.PHONY: build clean install doc toto distant chords check bin png all

.DEFAULT: build



USE_OCAMLFIND = true

OCAMLPACKS[] =
	extlib
	cryptokit
	unix
	str
	pcre

NATIVE_ENABLED = true
BYTE_ENABLED = false

#
# Various options
#
OCAMLFLAGS    += -g -warn-error A
# OCAMLCFLAGS   +=
# OCAMLOPTFLAGS +=
# OCAML_LINK_FLAGS +=
# OCAML_BYTE_LINK_FLAGS +=
# OCAML_NATIVE_LINK_FLAGS +=

src[]=
	read
	datamodel
	helpers
	write_index
	write_song
	write_pdf_song
	chord
	read_util

src_chord[]=
	chord
	make_chord_svg

prog = $(OCamlProgram generate,$(src))

prefix=$(dir $(prefix))
#pngdir=$(dir $(prefix)/png)

build : $(prefix)/bin/generate

mkdir -p tmp
mkdir -p $(prefix)/bin

$(prefix)/bin/generate : generate
	cp $< $@

make_chord = $(OCamlProgram make-chord,$(src_chord))

chord_list : $(make_chord)
	./make-chord --prefix $(prefix) --show-targets > $@

bin : $(make_chord) $(prog)

#png_digest.txt : $(make_chord) 
#	./make-chord --prefix $(prefix)


#png : png_digest.txt


check : $(make_chord)
	section
		v1=$(make_show)
		v2=$(cat png_digest.pristine.txt)
		if $(not $(equal $"$(v1)",$"$(v2)"))
			println($"v1 and v2 are different")
			./make-chord --prefix $(prefix)
		else
			println($"v1 and v2 are the same")

		println($"done")


#.SCANNER: png_digest.txt : $(make_chord) :value: $(digest-in-path-optional $(prefix)/png , $&)

#$(png_chords) : $(make_chord)
#	./make-chord $(prefix)

#chord : $(addprefix $(prefix)/png/,$(addsuffix .png,$(chords)))

clean :
	rm -rf install
